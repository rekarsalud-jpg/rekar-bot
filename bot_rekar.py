# ============================================================
# ü§ñ REKYBOT 1.5 ‚Äì Conexi√≥n con Gemini + Google Sheets + Telegram
# ============================================================

import os, time, requests, json
from flask import Flask, request, jsonify
import gspread
from oauth2client.service_account import ServiceAccountCredentials

app = Flask(__name__)

# ============================================================
# üîê VARIABLES DE ENTORNO
# ============================================================
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")

# ============================================================
# ‚öôÔ∏è CONFIGURACI√ìN GOOGLE SHEETS
# ============================================================
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("Rekar_Contactos").sheet1
except Exception as e:
    print(f"‚ö†Ô∏è No se pudo conectar a Google Sheets: {e}")
    sheet = None

# ============================================================
# üí¨ FUNCIONES B√ÅSICAS
# ============================================================

def send_whatsapp_text(phone, text):
    """Envia un mensaje a WhatsApp"""
    url = f"https://graph.facebook.com/v18.0/{PHONE_NUMBER_ID}/messages"
    headers = {"Authorization": f"Bearer {ACCESS_TOKEN}", "Content-Type": "application/json"}
    data = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": text}
    }
    try:
        r = requests.post(url, headers=headers, json=data)
        if r.status_code != 200:
            print(f"‚ö†Ô∏è Error enviando mensaje a {phone}: {r.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error de conexi√≥n con WhatsApp: {e}")

def send_telegram_message(text):
    """Envia un mensaje al grupo de Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        requests.post(url, data=data)
    except Exception as e:
        print(f"‚ö†Ô∏è Error enviando mensaje a Telegram: {e}")

def save_contact_to_sheet(name, phone):
    """Guarda los contactos en Google Sheets"""
    if sheet:
        try:
            sheet.append_row([time.strftime("%Y-%m-%d %H:%M:%S"), name, phone])
        except Exception as e:
            print(f"‚ö†Ô∏è Error guardando contacto: {e}")

# ============================================================
# üîÆ GEMINI API
# ============================================================

def ask_gemini(prompt):
    """Consulta al modelo Gemini y devuelve una respuesta de texto"""

    if not GEMINI_API_KEY:
        return "ü§ñ En breve agregaremos m√°s funciones inteligentes. Escrib√≠ M para volver al men√∫ o S para salir."

    try:
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
        headers = {"Content-Type": "application/json"}
        data = {"contents": [{"parts": [{"text": prompt}]}]}

        r = requests.post(url, headers=headers, json=data)

        if r.status_code == 200:
            response = r.json()
            if "candidates" in response and response["candidates"]:
                text = response["candidates"][0]["content"]["parts"][0]["text"]
                return text.strip()
            else:
                return "ü§ñ No pude entender la consulta. Intent√° con otra pregunta."

        else:
            print(f"‚ö†Ô∏è Error Gemini ({r.status_code}): {r.text}")
            send_telegram_message(f"‚ö†Ô∏è Gemini respondi√≥ con c√≥digo {r.status_code}. Error: {r.text[:250]}")
            return f"‚ö†Ô∏è Hubo un problema al procesar tu consulta (c√≥digo {r.status_code}). Escrib√≠ M para volver al men√∫ o S para salir."

    except Exception as e:
        print(f"‚ö†Ô∏è Error de conexi√≥n con Gemini: {e}")
        send_telegram_message(f"‚ö†Ô∏è Gemini no respondi√≥. Error: {e}")
        return "‚ö†Ô∏è Hubo un problema procesando tu consulta. Escrib√≠ M para volver al men√∫ o S para salir."

# ============================================================
# üß† ESTADOS Y MEN√ö
# ============================================================

sessions = {}

def clear_session(phone):
    if phone in sessions:
        del sessions[phone]

def get_main_menu():
    return (
        "¬°Genial! üåü Eleg√≠ una opci√≥n:\n\n"
        "1Ô∏è‚É£ Enviar tu CV (rekar.salud@gmail.com)\n"
        "2Ô∏è‚É£ Requisitos para trabajar en REKAR\n"
        "3Ô∏è‚É£ Ingresar a la web institucional\n"
        "4Ô∏è‚É£ Completar formulario de base de datos\n"
        "5Ô∏è‚É£ Informaci√≥n sobre REKAR\n"
        "6Ô∏è‚É£ Hablar con un representante\n"
        "7Ô∏è‚É£ Seguir chateando con RekyBot (modo asistente IA)\n"
        "8Ô∏è‚É£ Salir ‚ùå\n\n"
        "Si quer√©s volver al *men√∫*, escrib√≠ M.\nPara *salir*, escrib√≠ S."
    )

def get_greeting():
    return (
        "üëã ¬°Hola! Soy *RekyBot*, asistente virtual de *REKAR*.\n"
        "Atendemos de lunes a s√°bado de 9 a 19 hs.\n\n"
        "¬øC√≥mo es tu nombre?"
    )

# ============================================================
# üåê WEBHOOK META
# ============================================================

@app.route('/webhook', methods=['GET'])
def verify_token():
    if request.args.get("hub.verify_token") == VERIFY_TOKEN:
        return request.args.get("hub.challenge")
    return "Token inv√°lido", 403

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print(json.dumps(data, indent=2))

    try:
        entry = data["entry"][0]["changes"][0]["value"]
        if "messages" in entry:
            message = entry["messages"][0]
            phone = message["from"]
            text = message.get("text", {}).get("body", "").strip()

            if phone not in sessions:
                sessions[phone] = {"state": "start"}
                send_whatsapp_text(phone, get_greeting())
                return jsonify({"ok": True}), 200

            state = sessions[phone]["state"]

            # Primer mensaje: guarda nombre y muestra men√∫
            if state == "start":
                sessions[phone]["name"] = text
                save_contact_to_sheet(text, phone)
                send_whatsapp_text(phone, get_main_menu())
                sessions[phone]["state"] = "menu"
                return jsonify({"ok": True}), 200

            # MEN√ö PRINCIPAL
            if text.lower() in ["m", "men√∫", "menu"]:
                send_whatsapp_text(phone, get_main_menu())
                sessions[phone]["state"] = "menu"
                return jsonify({"ok": True}), 200

            # SALIDA
            if text.lower() in ["s", "salir", "8"]:
                clear_session(phone)
                send_whatsapp_text(phone, "üëã ¬°Gracias por comunicarte con REKAR! Que tengas un excelente d√≠a.")
                return jsonify({"ok": True}), 200

            # OPCIONES DEL MEN√ö
            if state == "menu":
                if text == "1":
                    send_whatsapp_text(phone, "üì© Pod√©s enviar tu CV a: rekar.salud@gmail.com")
                elif text == "2":
                    send_whatsapp_text(phone, "üßæ Requisitos: t√≠tulo habilitante, matr√≠cula, monotributo activo, y disponibilidad para trabajo domiciliario.")
                elif text == "3":
                    send_whatsapp_text(phone, "üåê Visit√° nuestra web: https://rekarsalud.blogspot.com/")
                elif text == "4":
                    send_whatsapp_text(phone, "üìã Complet√° el formulario de base de datos: [agregar enlace de Google Form]")
                elif text == "5":
                    send_whatsapp_text(phone, "üè• REKAR brinda servicios domiciliarios de kinesiolog√≠a y enfermer√≠a en CABA y GBA.")
                elif text == "6":
                    send_whatsapp_text(phone, "üë®‚Äç‚öïÔ∏è Un representante fue notificado. Te contactar√° a la brevedad.")
                    send_telegram_message(f"üìû Nuevo cliente solicita representante: {sessions[phone]['name']} ({phone})")
                elif text == "7":
                    send_whatsapp_text(phone, "üí¨ Ahora est√°s chateando con RekyBot Asistente. Pod√©s hacerme preguntas sobre nuestros servicios.")
                    sessions[phone]["state"] = "assistant"
                else:
                    send_whatsapp_text(phone, "‚ùå Opci√≥n no v√°lida. Escrib√≠ M para volver al men√∫ o S para salir.")
                return jsonify({"ok": True}), 200

            # MODO ASISTENTE IA (GEMINI)
            if state == "assistant":
                answer = ask_gemini(text)
                send_whatsapp_text(phone, answer)
                return jsonify({"ok": True}), 200

    except Exception as e:
        print(f"‚ö†Ô∏è Error general webhook: {e}")
        send_telegram_message(f"‚ö†Ô∏è Error en webhook: {e}")

    return jsonify({"ok": True}), 200

# ============================================================
# üöÄ EJECUCI√ìN DEL SERVIDOR
# ============================================================

if __name__ == '__main__':
    port = int(os.getenv("PORT", 10000))
    app.run(host='0.0.0.0', port=port)
