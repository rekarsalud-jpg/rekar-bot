# ==========================================
# ü§ñ REKYBOT 1.5.1 ‚Äì versi√≥n estable (Render + Gemini + Sheets)
# ==========================================

import os, time, requests, json
from flask import Flask, request, jsonify

app = Flask(__name__)

# === VARIABLES DE ENTORNO ===
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
GEMINI_URL = os.getenv("GEMINI_URL", "https://generativelanguage.googleapis.com/v1beta")

# === VARIABLES INTERNAS ===
active_sessions = {}
last_messages = {}
HUMAN_TTL = 3600  # 60 minutos

# ==============================================
# FUNCIONES BASE
# ==============================================

def send_whatsapp_text(phone, text):
    url = f"https://graph.facebook.com/v18.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": text}
    }
    try:
        r = requests.post(url, headers=headers, json=data)
        if r.status_code == 200:
            last_messages[phone] = text
            print(f"‚úÖ Enviado a WhatsApp {phone}")
        else:
            print(f"‚ùå Error enviando mensaje: {r.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error conexi√≥n WhatsApp: {e}")

def send_telegram_message(text):
    """Env√≠a mensaje al canal de Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, json=data)
        print(f"üì§ Enviado a Telegram: {text}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error Telegram: {e}")

# ==============================================
# GEMINI IA
# ==============================================

def ask_gemini(prompt):
    """Consulta a Gemini con fallback"""
    if not GEMINI_API_KEY:
        return "ü§ñ En breve agregaremos m√°s funciones inteligentes. Escrib√≠ M para volver al men√∫ o S para salir."

    try:
        url = f"{GEMINI_URL}/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
        headers = {"Content-Type": "application/json"}
        data = {"contents": [{"parts": [{"text": prompt}]}]}
        r = requests.post(url, headers=headers, json=data)
        if r.status_code == 200:
            content = r.json()["candidates"][0]["content"]["parts"][0]["text"]
            return content
        else:
            print(f"‚ö†Ô∏è Error Gemini: {r.text}")
            return "‚ö†Ô∏è Hubo un problema procesando tu consulta. Escrib√≠ M para volver al men√∫ o S para salir."
    except Exception as e:
        print(f"‚ö†Ô∏è Error Gemini conexi√≥n: {e}")
        return "‚ö†Ô∏è Hubo un problema procesando tu consulta. Escrib√≠ M para volver al men√∫ o S para salir."

# ==============================================
# UTILIDADES DE SESI√ìN
# ==============================================

def clear_session(phone):
    active_sessions.pop(phone, None)
    last_messages.pop(phone, None)
    print(f"üßπ Sesi√≥n cerrada para {phone}")

def return_to_menu(phone):
    info = active_sessions.get(phone, {})
    name = info.get("name", "Cliente")
    send_whatsapp_text(phone, get_main_menu(name))
    info["state"] = "menu"
    active_sessions[phone] = info

# ==============================================
# MEN√öS Y TEXTOS
# ==============================================

def get_main_menu(name):
    return (
        f"¬°Genial, {name}! üåü\n"
        "Eleg√≠ una opci√≥n:\n\n"
        "1Ô∏è‚É£ Enviar tu CV\n"
        "2Ô∏è‚É£ Requisitos para trabajar en REKAR\n"
        "3Ô∏è‚É£ Ingresar a la web institucional\n"
        "4Ô∏è‚É£ Completar formulario de base de datos\n"
        "5Ô∏è‚É£ Informaci√≥n sobre REKAR\n"
        "6Ô∏è‚É£ Hablar con un representante\n"
        "7Ô∏è‚É£ Seguir chateando con RekyBot (modo asistente IA)\n"
        "8Ô∏è‚É£ Salir ‚ùå\n\n"
        "Si quer√©s volver al *men√∫*, escrib√≠ M.\nPara *salir*, S."
    )

def get_greeting():
    return (
        "üëã ¬°Hola! Soy ü§ñ *RekyBot 1.5.1*, asistente virtual de *REKAR*. üòä\n"
        "¬°Gracias por escribirnos! Atendemos de *lunes a s√°bado de 9 a 19 hs.*\n\n"
        "¬øC√≥mo es tu nombre?"
    )

# ==============================================
# WEBHOOK WHATSAPP
# ==============================================

@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        if request.args.get("hub.verify_token") == VERIFY_TOKEN:
            return request.args.get("hub.challenge")
        return "Token inv√°lido", 403

    data = request.get_json()
    try:
        msg = data["entry"][0]["changes"][0]["value"]["messages"][0]
        phone = msg["from"]
        text = msg["text"]["body"].strip()

        info = active_sessions.get(phone, {"state": "start", "time": time.time()})

        # Salida manual
        if text.lower() in ["s", "salir"]:
            send_whatsapp_text(phone, "üëã ¬°Gracias por contactarte con REKAR! Cuando necesites, escribinos de nuevo.")
            clear_session(phone)
            return jsonify({"ok": True}), 200

        # Volver al men√∫
        if text.lower() in ["m", "menu"]:
            return_to_menu(phone)
            return jsonify({"ok": True}), 200

        # === ESTADOS ===
        if info["state"] == "start":
            send_whatsapp_text(phone, get_greeting())
            info["state"] = "awaiting_name"

        elif info["state"] == "awaiting_name":
            name = text.split(" ")[0].capitalize()
            info["name"] = name
            send_whatsapp_text(phone, get_main_menu(name))
            info["state"] = "menu"

        elif info["state"] == "menu":
            if text == "1":
                send_whatsapp_text(phone, "üìß Pod√©s enviar tu CV a rekar.salud@gmail.com incluyendo tus datos y disponibilidad.")
            elif text == "2":
                send_whatsapp_text(phone, "ü©∫ Requisitos: matr√≠cula, monotributo, disponibilidad y compromiso profesional.")
            elif text == "3":
                send_whatsapp_text(phone, "üåê Visit√° nuestra web: https://rekarsalud.blogspot.com/?m=1")
            elif text == "4":
                send_whatsapp_text(phone, "üóÇÔ∏è Complet√° el formulario: [agregar enlace de Google Form]")
            elif text == "5":
                send_whatsapp_text(phone, "üè• REKAR brinda servicios domiciliarios de kinesiolog√≠a y enfermer√≠a en CABA y GBA.")
            elif text == "6":
                send_whatsapp_text(phone, "üßë‚Äçüíº Un representante fue notificado. Te contactar√° a la brevedad.")
                send_telegram_message(f"üìû Nuevo cliente quiere hablar con un representante:\n{info.get('name')} (+{phone})")
                info["state"] = "human_active"
                info["time"] = time.time()
            elif text == "7":
                send_whatsapp_text(phone, "üí¨ Ahora est√°s chateando con RekyBot Asistente. Pod√©s hacerme preguntas sobre nuestros servicios.")
                info["state"] = "assistant_mode"
            elif text == "8":
                send_whatsapp_text(phone, "üëã ¬°Gracias por contactarte con REKAR! Que tengas un excelente d√≠a.")
                clear_session(phone)
            else:
                send_whatsapp_text(phone, "No entend√≠ tu respuesta. Escrib√≠ el n√∫mero de la opci√≥n o M para men√∫.")

        elif info["state"] == "human_active":
            # Solo reenv√≠a a Telegram, sin responder
            send_telegram_message(f"üí¨ {info.get('name', 'Cliente')} (+{phone}): {text}")

        elif info["state"] == "assistant_mode":
            reply = ask_gemini(text)
            send_whatsapp_text(phone, reply)

        active_sessions[phone] = info
        return jsonify({"ok": True}), 200

    except Exception as e:
        print("‚ö†Ô∏è Error webhook:", e)
        return jsonify({"error": str(e)}), 200

# ==============================================
# WEBHOOK TELEGRAM
# ==============================================

@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if not data or "message" not in data:
        return jsonify({"ok": True}), 200

    msg = data["message"]
    chat_id = str(msg["chat"]["id"])
    text = msg.get("text", "").strip()

    if chat_id != str(TELEGRAM_CHAT_ID):
        return jsonify({"ok": True}), 200

    # Responder directamente desde Telegram (reply)
    if "reply_to_message" in msg and msg["reply_to_message"]:
        phone = msg["reply_to_message"]["text"].split("(")[-1].split(")")[0]
        send_whatsapp_text(phone, text)
        return jsonify({"ok": True}), 200

    if text.startswith("/cerrar"):
        try:
            _, phone = text.split(" ", 1)
            clear_session(phone)
            send_telegram_message(f"‚úÖ Sesi√≥n cerrada para {phone}")
            send_whatsapp_text(phone, "üîö La conversaci√≥n fue cerrada. Gracias por comunicarte con REKAR.")
        except:
            send_telegram_message("‚ùå Usa: /cerrar <n√∫mero>")
    return jsonify({"ok": True}), 200

# ==============================================
# EJECUCI√ìN SERVIDOR
# ==============================================

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
