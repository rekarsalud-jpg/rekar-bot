# ==========================================
# ü§ñ REKYBOT 1.5.1 ‚Äì estable (Render)
# ==========================================

import os, time, requests, json
from flask import Flask, request, jsonify

app = Flask(__name__)

# === VARIABLES DE ENTORNO ===
ACCESS_TOKEN       = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID    = os.getenv("PHONE_NUMBER_ID")
VERIFY_TOKEN       = os.getenv("VERIFY_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID   = str(os.getenv("TELEGRAM_CHAT_ID", ""))
GEMINI_API_KEY     = os.getenv("GEMINI_API_KEY", "")
GEMINI_URL         = os.getenv("GEMINI_URL", "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")
GEMINI_MODEL       = os.getenv("GEMINI_MODEL", "gemini-2.0-flash")

# === VARIABLES INTERNAS ===
sessions = {}             # {phone: {"state":..., "name":..., "time":..., "human_notified":bool}}
last_user_text = {}       # evita loops
HUMAN_TTL = 3600          # 60 minutos

# ==============================================
# HELPERS
# ==============================================

def send_whatsapp_text(phone, text):
    url = f"https://graph.facebook.com/v18.0/{PHONE_NUMBER_ID}/messages"
    headers = {"Authorization": f"Bearer {ACCESS_TOKEN}", "Content-Type": "application/json"}
    data = {"messaging_product": "whatsapp", "to": phone, "type": "text", "text": {"body": text}}
    try:
        r = requests.post(url, headers=headers, json=data, timeout=20)
        if r.status_code == 200:
            print(f"‚úÖ WhatsApp -> {phone}")
            last_user_text[phone] = text
            return True
        print(f"‚ùå WA error: {r.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è WA exception: {e}")
    return False


def send_telegram_message(text, reply_to=None):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    if reply_to:
        payload["reply_to_message_id"] = reply_to
    try:
        requests.post(url, json=payload, timeout=15)
        print("üì§ TG -> grupo")
    except Exception as e:
        print(f"‚ö†Ô∏è TG exception: {e}")


def clear_session(phone):
    sessions.pop(phone, None)
    last_user_text.pop(phone, None)
    print(f"üßπ Sesi√≥n cerrada {phone}")


def is_duplicate(phone, text):
    return last_user_text.get(phone, "").strip() == str(text).strip()


def get_greeting():
    return (
        "üëã ¬°Hola! Soy ü§ñ *RekyBot*, asistente virtual de *REKAR*. üòä\n"
        "Atendemos de *lunes a s√°bado de 9 a 19 hs.*\n\n"
        "¬øC√≥mo es tu nombre?"
    )


def main_menu(name):
    n = name if name else "¬°Genial!"
    return (
        f"¬°Genial, {n}! üåü\n"
        "Eleg√≠ una opci√≥n:\n\n"
        "1Ô∏è‚É£ Enviar tu CV (rekar.salud@gmail.com)\n"
        "2Ô∏è‚É£ Requisitos para trabajar en REKAR\n"
        "3Ô∏è‚É£ Ingresar a la web institucional\n"
        "4Ô∏è‚É£ Completar formulario de base de datos\n"
        "5Ô∏è‚É£ Informaci√≥n sobre REKAR\n"
        "6Ô∏è‚É£ Hablar con un representante de REKAR\n"
        "7Ô∏è‚É£ Seguir chateando con RekyBot (modo asistente IA)\n"
        "8Ô∏è‚É£ Salir ‚ùå\n\n"
        "üìé Tambi√©n pod√©s usar nuestro asistente (opci√≥n 7).\n"
        "Si quer√©s volver al *men√∫*, escrib√≠ M. Para *salir*, S."
    )

# ==============================================
# GEMINI
# ==============================================

def ask_gemini(prompt, context_hint=""):
    """Llama a Gemini 2.0-flash. Devuelve string o None en error."""
    if not GEMINI_API_KEY:
        return None
    try:
        url = f"{GEMINI_URL}?key={GEMINI_API_KEY}"
    system_hint = (
        "Sos *RekyBot IA 1.5.2*, el asistente oficial de *REKAR ‚Äì Red de Enfermer√≠a y Kinesiolog√≠a Argentina*. "
        "Tu misi√≥n es representar a REKAR con calidez, claridad y profesionalismo. "
        "Tu estilo debe ser humano, emp√°tico y confiable, reflejando siempre nuestro lema: "
        "'Cuidamos con compromiso, sanamos con empat√≠a'. "
        "Deb√©s transmitir cercan√≠a, tranquilidad y conocimiento t√©cnico, hablando de manera sencilla, sin tecnicismos innecesarios. "
        "En REKAR brindamos atenci√≥n domiciliaria de kinesiolog√≠a y enfermer√≠a, priorizando la calidad humana y la formaci√≥n continua. "
        "Nuestro objetivo es acompa√±ar tanto al paciente como a su familia, en un proceso de recuperaci√≥n seguro y digno dentro del hogar. "
        "Atendemos de lunes a s√°bado, de 9 a 19 hs, en Zona Sur, Zona Oeste y Zona Norte del GBA. "
        "Las sesiones se organizan por paquetes (10 o 20) o mensualmente, buscando la mejor relaci√≥n costo-calidad. "
        "La osteopat√≠a se abona por sesi√≥n individual ($60.000 aprox.), mientras que la kinesiolog√≠a ronda entre $25.000 y $30.000, "
        "y la enfermer√≠a entre $10.000 y $20.000 seg√∫n la prestaci√≥n. "
        "Si el usuario es paciente, destac√° los beneficios de recibir atenci√≥n en casa: comodidad, confianza, continuidad del tratamiento. "
        "Si el usuario es profesional, explic√° los requisitos: matr√≠cula provincial y nacional, seguro de mala praxis, monotributo activo. "
        "Resalt√° que REKAR ofrece honorarios competitivos, formaci√≥n, soporte constante y asignaci√≥n de pacientes por cercan√≠a. "
        "Si el usuario es una obra social o instituci√≥n, mostrale seguridad y ofrec√© soluciones: coordinaci√≥n de prestaciones, control de insumos y seguimiento digital. "
        "Las urgencias m√©dicas no son parte de nuestro servicio: indic√° siempre comunicarse con el 107, SAME o su cobertura m√©dica. "
        "Los cuidadores acompa√±an y asisten, pero no realizan pr√°cticas m√©dicas ni kin√©sicas. "
        "Si alguien es irrespetuoso o usa malas palabras, respond√© con calma y cort√° la conversaci√≥n educadamente. "
        "Si no sab√©s algo, indic√° que puede escribir a rekar.salud@gmail.com o elegir la opci√≥n 6 del men√∫ para hablar con un representante. "
        "Finaliz√° siempre tus respuestas recordando: üóÇ 'Si quer√©s volver al men√∫ principal, escrib√≠ M. Para salir, S.'"
    )

    faq = {
        "precio": (
            "üí∞ En REKAR organizamos los tratamientos por paquetes de sesiones (10 o 20), "
            "ya que creemos que la recuperaci√≥n es un proceso continuo y no una sesi√≥n aislada. "
            "Kinesiolog√≠a cuesta entre $25.000 y $30.000 por sesi√≥n (con descuento por paquete), "
            "osteopat√≠a $60.000, y enfermer√≠a entre $10.000 y $20.000 seg√∫n la prestaci√≥n. "
            "Los pagos pueden realizarse por transferencia o plan mensual."
        ),
        "zona": (
            "üìç Atendemos actualmente en Gran Buenos Aires ‚Äî Zonas Sur, Oeste y Norte. "
            "Siempre buscamos que el profesional est√© cerca del domicilio del paciente, para garantizar continuidad y comodidad."
        ),
        "obras sociales": (
            "üè• No trabajamos con obras sociales directamente, pero s√≠ realizamos servicios para obras sociales que nos contratan "
            "y derivan pacientes a nuestra red de profesionales."
        ),
        "diferencia": (
            "üåü REKAR se diferencia por su enfoque humano y tecnol√≥gico. "
            "Geolocalizamos pacientes y profesionales, capacitamos continuamente a nuestro equipo, "
            "hacemos seguimiento de cada caso y registramos las evoluciones cl√≠nicas. "
            "Adem√°s, desarrollamos una app con historia cl√≠nica digital, firma electr√≥nica y control de insumos."
        ),
        "seguimiento": (
            "üìã Cada atenci√≥n queda registrada en planillas y evoluciones kin√©sicas y de enfermer√≠a. "
            "En breve todos los registros estar√°n en formato digital, para mayor trazabilidad y transparencia. "
            "Supervisamos los tratamientos y acompa√±amos tanto al paciente como al profesional."
        ),
        "evaluacion": (
            "üßë‚Äç‚öïÔ∏è S√≠, ofrecemos evaluaciones iniciales sin compromiso a trav√©s de Zoom. "
            "Es una excelente oportunidad para conocernos y planificar juntos el mejor tratamiento."
        ),
        "profesionales": (
            "üë©‚Äç‚öïÔ∏è Buscamos kinesi√≥logos, enfermeros y cuidadores con vocaci√≥n, compromiso y empat√≠a. "
            "En REKAR priorizamos las ganas de trabajar y crecer. "
            "Brindamos capacitaciones y acompa√±amiento constante a nuestros profesionales."
        ),
        "habilitacion": (
            "‚úÖ Para trabajar con nosotros necesit√°s: matr√≠cula provincial y nacional habilitante, "
            "seguro de mala praxis vigente, CV actualizado, certificado de antecedentes penales y monotributo activo."
        ),
        "pacientes": (
            "ü©∫ Atendemos pacientes con patolog√≠as respiratorias, motoras, neurol√≥gicas, deportivas, pedi√°tricas, posquir√∫rgicas "
            "y cr√≥nicas. Tambi√©n trabajamos en rehabilitaci√≥n motora y cuidados paliativos."
        ),
        "urgencias": (
            "üö® En caso de urgencias m√©dicas, comunicate con el 107 (SAME) o tu cobertura m√©dica. "
            "REKAR se dedica al seguimiento y recuperaci√≥n funcional, no a emergencias. "
            "Pod√©s contactarnos ante cualquier duda o s√≠ntoma para recibir orientaci√≥n."
        ),
        "cuidador": (
            "üëµ Los cuidadores acompa√±an, asisten en higiene, alimentaci√≥n y control de alarmas, "
            "pero no realizan intervenciones m√©dicas ni kin√©sicas. Su rol es contener y avisar al equipo de salud ante cualquier cambio."
        ),
        "medicos": (
            "üë®‚Äç‚öïÔ∏è Contamos con m√©dicos coordinadores que supervisan la evoluci√≥n de los pacientes cada 15 d√≠as, "
            "evaluando progresos y garantizando la calidad del tratamiento."
        ),
        "contacto": (
            "üì© Para consultas, postulaciones o convenios, escribinos a rekar.salud@gmail.com "
            "o eleg√≠ la opci√≥n 6 del men√∫ para hablar con un representante humano."
        )
    }
        
        parts = []
        if context_hint:
            parts.append({"text": context_hint})
        parts.append({"text": prompt})
        body = {
            "contents": [{"parts": parts}],
            "systemInstruction": {"role": "system", "parts": [{"text": system_hint}]}
        }
        r = requests.post(url, headers={"Content-Type": "application/json"}, json=body, timeout=10)
        if r.status_code != 200:
            # log a Telegram para diagnosticar
            try:
                send_telegram_message(f"‚ö†Ô∏è Gemini respondi√≥ {r.status_code}. Error: {r.text[:700]}")
            except:
                pass
            return None
        data = r.json()
        candidates = data.get("candidates", [])
        if not candidates:
            return None
        parts_out = candidates[0].get("content", {}).get("parts", [])
        if not parts_out:
            return None
        return parts_out[0].get("text", "").strip()
    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è Error llamando a Gemini: {e}")
        return None

# ==============================================
# WEBHOOK WHATSAPP
# ==============================================

@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        if request.args.get("hub.verify_token") == VERIFY_TOKEN:
            return request.args.get("hub.challenge")
        return "Token inv√°lido", 403

    data = request.get_json()
    try:
        msg = data["entry"][0]["changes"][0]["value"]["messages"][0]
        phone = msg["from"]
        text = msg.get("text", {}).get("body", "").strip()

        # Evita eco/duplicado
        if is_duplicate(phone, text):
            return jsonify({"ok": True}), 200

        info = sessions.get(phone, {"state": "start", "time": time.time(), "human_notified": False})

        # Comandos universales
        if text.lower() in ["m", "menu"]:
            info["state"] = "menu"
            sessions[phone] = info
            send_whatsapp_text(phone, main_menu(info.get("name")))
            return jsonify({"ok": True}), 200

        if text.lower() in ["s", "salir"]:
            send_whatsapp_text(phone, "¬°Gracias por contactarte con REKAR! üëã Cuando necesites, escribinos de nuevo.")
            clear_session(phone)
            return jsonify({"ok": True}), 200

        # === ESTADOS ===
        if info["state"] == "start":
            send_whatsapp_text(phone, get_greeting())
            info["state"] = "awaiting_name"
            sessions[phone] = info
            return jsonify({"ok": True}), 200

        elif info["state"] == "awaiting_name":
            name = text.split(" ")[0].capitalize()
            info["name"] = name
            info["state"] = "menu"
            sessions[phone] = info
            # (ac√° podr√≠as guardar a Sheets si quer√©s)
            send_whatsapp_text(phone, main_menu(name))
            return jsonify({"ok": True}), 200

        elif info["state"] == "menu":
            choice = text.lower()
            if choice == "1":
                send_whatsapp_text(phone, "üìß Envi√° tu CV a: rekar.salud@gmail.com\n¬°Gracias por postularte! üôå")
            elif choice == "2":
                send_whatsapp_text(phone, "‚úÖ Requisitos: t√≠tulo habilitante, matr√≠cula vigente, seguro de mala praxis y monotributo activo.")
            elif choice == "3":
                send_whatsapp_text(phone, "üåê Visit√° nuestra web: https://rekarsalud.blogspot.com/?m=1")
            elif choice == "4":
                send_whatsapp_text(phone, "üóÇÔ∏è Complet√° el formulario: [agregar enlace Google Form]")
            elif choice == "5":
                send_whatsapp_text(phone, "üè• REKAR brinda servicios domiciliarios de kinesiolog√≠a y enfermer√≠a en CABA y GBA.")
            elif choice == "6":
                # activar modo humano (silencio del bot)
                if not info.get("human_notified"):
                    send_whatsapp_text(phone, "üßë‚Äçüíº Un representante fue notificado. Te contactar√° a la brevedad.")
                    send_telegram_message(f"üìû Nuevo cliente quiere hablar con un representante:\n{info.get('name','Cliente')} (+{phone})")
                    info["human_notified"] = True
                info["state"] = "human_mode"
                info["time"] = time.time()
                sessions[phone] = info
            elif choice == "7":
                send_whatsapp_text(phone, "üí¨ Activando *RekyBot IA*... Pod√©s hacerme preguntas sobre nuestros servicios, horarios o c√≥mo trabajar con nosotros.")
                info["state"] = "assistant_mode"
                info["time"] = time.time()
                sessions[phone] = info
            elif choice == "8":
                send_whatsapp_text(phone, "¬°Gracias por contactarte con REKAR! üëã Cuando necesites, escribinos de nuevo.")
                clear_session(phone)
                return jsonify({"ok": True}), 200
            else:
                send_whatsapp_text(phone, "No entend√≠ tu respuesta. Envi√° el n√∫mero de la opci√≥n o M para men√∫.")
            return jsonify({"ok": True}), 200

        elif info["state"] == "human_mode":
            # Silencio del bot: solo forward a Telegram
            elapsed = time.time() - info.get("time", 0)
            if elapsed > HUMAN_TTL:
                info["state"] = "menu"
                info["human_notified"] = False
                sessions[phone] = info
                send_whatsapp_text(phone, "‚è≥ La conversaci√≥n con el representante finaliz√≥. Escrib√≠ 6 para volver a hablar o M para el men√∫.")
            else:
                send_telegram_message(f"üí¨ {info.get('name','Cliente')} (+{phone}): {text}")
            return jsonify({"ok": True}), 200

        elif info["state"] == "assistant_mode":
            # Mensaje ‚Äúprocesando‚Äù
            send_whatsapp_text(phone, "‚è≥ Procesando tu pregunta...")
            # Pregunta a Gemini (con timeout y fallback)
            answer = ask_gemini(text, context_hint=f"Cliente: {info.get('name','')}, tel√©fono: +{phone}")
            if answer:
                answer = (answer.strip() + "\n\nüóÇÔ∏è Si quer√©s volver al *men√∫*, escrib√≠ M. Para *salir*, S.")
                send_whatsapp_text(phone, answer)
            else:
                # Fallback h√≠brido
                fallback = (
                    "ü§ñ Nuestra IA est√° un poco ocupada, pero te ayudo igual. "
                    "Pod√©s preguntarme sobre nuestros *servicios*, *zonas* (CABA y GBA) o *c√≥mo sumarte al equipo*. \n"
                    "üìã Si quer√©s volver al *men√∫ principal*, escrib√≠ M. Para *salir*, S."
                )
                send_whatsapp_text(phone, fallback)
            return jsonify({"ok": True}), 200

    except Exception as e:
        print("‚ö†Ô∏è Error webhook:", e)
        return jsonify({"error": str(e)}), 200

    return jsonify({"ok": True}), 200

# ==============================================
# WEBHOOK TELEGRAM (responder -> WhatsApp)
# ==============================================

@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if not data or "message" not in data:
        return jsonify({"ok": True}), 200

    msg = data["message"]
    chat_id = str(msg["chat"]["id"])
    if chat_id != TELEGRAM_CHAT_ID:
        # ignorar otros chats
        return jsonify({"ok": True}), 200

    text = msg.get("text", "").strip()

    # /cerrar <numero>
    if text.startswith("/cerrar"):
        try:
            _, phone = text.split(" ", 1)
            clear_session(phone.strip())
            send_telegram_message(f"‚úÖ Sesi√≥n cerrada para {phone.strip()}")
        except:
            send_telegram_message("‚ùå Usa: /cerrar <n√∫mero>")
        return jsonify({"ok": True}), 200

    # /enviar <numero> <mensaje>  (queda por compatibilidad)
    if text.startswith("/enviar"):
        try:
            _, phone, payload = text.split(" ", 2)
            send_whatsapp_text(phone.strip(), payload)
        except:
            send_telegram_message("‚ùå Formato: /enviar <n√∫mero> <mensaje>")
        return jsonify({"ok": True}), 200

    # Si el mensaje de Telegram es RESPUESTA a un mensaje reenviado, extraemos el n√∫mero
    if "reply_to_message" in msg:
        original = msg["reply_to_message"].get("text", "")
        # El formato que reenviamos es: "üí¨ Nombre (+549...) : contenido"
        phone = None
        if "(" in original and ")" in original and "+" in original:
            try:
                phone = original.split("(")[1].split(")")[0].replace("+", "").strip()
            except:
                phone = None
        if phone:
            send_whatsapp_text(phone, text)
            send_telegram_message(f"‚úÖ Enviado a +{phone}", reply_to=msg["message_id"])
            # Mantener modo humano activo mientras se conversa
            info = sessions.get(phone, {"state": "human_mode", "time": time.time(), "human_notified": True})
            info["state"] = "human_mode"
            info["time"] = time.time()
            info["human_notified"] = True
            sessions[phone] = info
            return jsonify({"ok": True}), 200

    return jsonify({"ok": True}), 200

# ==============================================
# RUN
# ==============================================

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
